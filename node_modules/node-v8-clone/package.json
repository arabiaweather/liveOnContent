{
  "name": "node-v8-clone",
  "version": "0.4.5",
  "description": "The most convenient and accurate cloner for node.js. It's also very fast in some cases (benchmarks inside).",
  "main": "lib/clone.js",
  "scripts": {
    "test": "node_modules/.bin/mocha -R spec test/test.js",
    "test-3rdparty": "node_modules/.bin/mocha -R spec test/3rdparty.js --colors 2>/dev/null; exit 0",
    "benchmark": "node bench/arrays.js; node bench/class.js; node bench/date.js; node bench/deep.js; node bench/deep_array.js; node bench/number.js; node bench/object.js; node bench/regexp.js",
    "install": "node-gyp rebuild"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/AlexeyKupershtokh/node-v8-clone.git"
  },
  "bugs": {
    "url": "https://github.com/AlexeyKupershtokh/node-v8-clone/issues",
    "email": "alexey.kupershtokh@gmail.com"
  },
  "keywords": [
    "v8",
    "clone",
    "performance",
    "speed"
  ],
  "author": {
    "name": "Alexey Kupershtokh",
    "email": "alexey.kupershtokh@gmail.com"
  },
  "license": "BSD",
  "gypfile": true,
  "readmeFilename": "README.md",
  "dependencies": {},
  "devDependencies": {
    "benchmark": "*",
    "mocha": "*",
    "cloneextend": "*",
    "clone": "*",
    "lodash": "*",
    "underscore": "*",
    "benchmark.js-plot": "*",
    "owl-deepcopy": "*"
  },
  "readme": "node-v8-clone\n=============\n[![Build Status](https://secure.travis-ci.org/AlexeyKupershtokh/node-v8-clone.png?branch=master)](https://travis-ci.org/AlexeyKupershtokh/node-v8-clone)\n\nIt's a c++ addon for node.js that does the most accurate cloning for node.js.\nIt's also very fast in some cases (benchmarks inside).\n\nInstallation:\n=============\nTested on node.js versions 0.4, 0.6. 0.8 and 0.9.\nYou may be asked to install `make` and `g++` as well.\n```\nnpm install node-v8-clone\n```\n\nUsage:\n======\n```javascript\nvar clone = require('node-v8-clone').clone;\nvar a = { x: { y: {} } };\n\n// deep clone\nvar b = clone(a, true);\na === b // false\na.x === b.x // false\na.x.y === b.x.y // false\n\n// shallow clone\nvar c = clone(a, false);\na === c // false\na.x === c.x // true\na.x.y === c.x.y // true\n```\n\nBenchmark results\n=================\nObject shallow cloning:\n```\nobj1 = {a: 'a', b: 'b', c: 'c', d: 'd', e: 'e'}\nobj1 for in                   x   828,849 ops/sec ±0.45% (97 runs sampled)\nobj1 for in hasOwnProperty    x   584,575 ops/sec ±1.12% (92 runs sampled)\nobj1 for Object.keys          x 1,074,931 ops/sec ±0.46% (100 runs sampled)\nobj1 lodash _.clone           x   383,463 ops/sec ±0.68% (94 runs sampled)\nobj1 node-v8-clone cloner     x 5,503,537 ops/sec ±0.61% (93 runs sampled)\n\n\nobj2 = {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nobj2 for in                   x   553,909 ops/sec ±0.63% (90 runs sampled)\nobj2 for in hasOwnProperty    x   404,802 ops/sec ±0.42% (97 runs sampled)\nobj2 for Object.keys          x 1,031,865 ops/sec ±0.67% (90 runs sampled)\nobj2 lodash _.clone           x   419,223 ops/sec ±0.50% (95 runs sampled)\nobj2 node-v8-clone cloner     x 4,560,158 ops/sec ±0.93% (92 runs sampled)\n\nobj3 = {_0: '_0', _1: '_1', ..., _999: '_999' }\nobj3 for in                   x     1,701 ops/sec ±0.59% (98 runs sampled)\nobj3 for in hasOwnProperty    x     1,428 ops/sec ±0.62% (94 runs sampled)\nobj3 for Object.keys          x     4,863 ops/sec ±0.59% (93 runs sampled)\nobj3 lodash _.clone           x     2,136 ops/sec ±0.65% (97 runs sampled)\nobj3 node-v8-clone cloner     x    40,657 ops/sec ±1.16% (92 runs sampled)\n\nobj4 = {0: 0, 1: 1, 2: 2, ..., 998: 998, 999: 999 }\nobj4 for in                   x     4,332 ops/sec ±0.53% (100 runs sampled)\nobj4 for in hasOwnProperty    x     2,477 ops/sec ±0.58% (93 runs sampled)\nobj4 for Object.keys          x    13,546 ops/sec ±0.61% (92 runs sampled)\nobj4 lodash _.clone           x     5,905 ops/sec ±0.61% (98 runs sampled)\nobj4 node-v8-clone cloner     x   372,176 ops/sec ±0.74% (93 runs sampled)\n```\nArray shallow cloning:\n```\narr1 = [1, 2, 3, 4, 5]\narr1 slice()                 x  9,171,117 ops/sec ±0.71% (89 runs sampled)\narr1 []       for i < l i++  x  7,521,757 ops/sec ±0.79% (93 runs sampled)\narr1 Array(l) for i < l i++  x 19,521,981 ops/sec ±1.65% (81 runs sampled)\narr1 for in                  x    843,917 ops/sec ±0.61% (96 runs sampled)\narr1 for in hasOwnProperty   x    553,712 ops/sec ±0.47% (99 runs sampled)\narr1 lodash _.clone          x  1,826,144 ops/sec ±0.72% (96 runs sampled)\narr1 node-v8-clone cloner    x  5,541,714 ops/sec ±0.54% (91 runs sampled)\n\narr2 = [0, 1, 2, ..., 998, 999]\narr2 slice()                 x    534,954 ops/sec ±0.39% (91 runs sampled)\narr2 []       for i < l i++  x     88,164 ops/sec ±0.59% (85 runs sampled)\narr2 Array(l) for i < l i++  x    201,974 ops/sec ±0.76% (95 runs sampled)\narr2 for in                  x      8,666 ops/sec ±0.61% (95 runs sampled)\narr2 for in hasOwnProperty   x      4,123 ops/sec ±0.47% (101 runs sampled)\narr2 lodash _.clone          x    157,718 ops/sec ±0.55% (83 runs sampled)\narr2 node-v8-clone cloner    x    552,515 ops/sec ±0.24% (81 runs sampled)\n```\nRegExp shallow cloning:\n```\nRegExp new RegExp(re.source, /\\w*$/.exec(re))    x 1,004,526 ops/sec ±2.53% (91 runs sampled)\nRegExp new RegExp(re.source, \"g\"? + \"i\"? + \"m\"?) x 3,550,976 ops/sec ±3.00% (90 runs sampled)\nRegExp lodash _.clone                            x 1,119,311 ops/sec ±1.79% (85 runs sampled)\nRegExp node-v8-clone js cloner                   x 5,000,977 ops/sec ±1.33% (94 runs sampled)\n```\nDate shallow cloning:\n```\ndate new Date(+date) cloner x 2,657,488 ops/sec ±2.52% (87 runs sampled)\ndate lodash _.clone         x 1,185,187 ops/sec ±1.63% (93 runs sampled)\ndate node-v8-clone cloner   x 5,147,363 ops/sec ±0.98% (93 runs sampled)\n```",
  "_id": "node-v8-clone@0.4.5",
  "dist": {
    "shasum": "1692ccbb44c997d764f3fb18f2203fe7bb410b05"
  },
  "_from": "node-v8-clone@",
  "_resolved": "https://registry.npmjs.org/node-v8-clone/-/node-v8-clone-0.4.5.tgz"
}
